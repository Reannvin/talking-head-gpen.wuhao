from PIL import Image, ImageDraw
import numpy as np
import cv2

import sys
from os.path import abspath, dirname
# current_dir = dirname(abspath(__file__))
# sys.path.insert(0, current_dir+'/data_utils')
# print("=======================", current_dir)
from data_utils.face_parsing import FaceParsing

fp = FaceParsing()

def get_crop_box(box, expand):
    x, y, x1, y1 = box
    x_c, y_c = (x+x1)//2, (y+y1)//2
    w, h = x1-x, y1-y
    s = int(max(w, h)//2*expand)
    crop_box = [x_c-s, y_c-s, x_c+s, y_c+s]
    return crop_box, s

# def face_seg(image):
#     seg_image = fp(image)
#     if seg_image is None:
#         print("error, no person_segment")
#         return None

#     seg_image = seg_image.resize(image.size)
#     return seg_image

def face_seg(image, use_erode=False, use_dilate=False):
    seg_image = fp(image)
    if seg_image is None:
        print("error, no person_segment")
        return None
    seg_image = seg_image.resize(image.size)
    # ATTENTION
    if use_erode:
        seg_image_np = np.array(seg_image)
        kernel = np.ones((3, 3), np.uint8)
        eroded_image = cv2.erode(seg_image_np, kernel, iterations=1)
        seg_image = Image.fromarray(eroded_image)
        seg_image.save("face_seg_image_erode.jpg")    
    elif use_dilate:
        seg_image_np = np.array(seg_image)
        kernal = np.ones((3, 3), np.uint8)
        dilated_image = cv2.dilate(seg_image_np, kernal, iterations=1)
        seg_image = Image.fromarray(dilated_image)
        seg_image.save("face_seg_image_dillate.jpg")
    else:
        seg_image.save("face_seg_image.jpg")    
    return seg_image

def get_image(image,face,face_box,upper_boundary_ratio = 0.5,expand=1.2,debug=False, enable_erode=False, enable_dilate=False):

    body = Image.fromarray(image[:,:,::-1])
    face = Image.fromarray(face[:,:,::-1])

    x, y, x1, y1 = face_box 
    crop_box, s = get_crop_box(face_box, expand)
    x_s, y_s, x_e, y_e = crop_box
    face_position = (x, y)

    face_large = body.crop(crop_box)
    ori_shape = face_large.size

    mask_image = face_seg(face_large, enable_erode, enable_dilate)
    
    mask_small = mask_image.crop((x-x_s, y-y_s, x1-x_s, y1-y_s))
    mask_image = Image.new('L', ori_shape, 0)
    mask_image.paste(mask_small, (x-x_s, y-y_s, x1-x_s, y1-y_s))

    # keep upper_boundary_ratio of talking area
    width, height = mask_image.size
    top_boundary = int(height * upper_boundary_ratio)
    modified_mask_image = Image.new('L', ori_shape, 0)
    modified_mask_image.paste(mask_image.crop((0, top_boundary, width, height)), (0, top_boundary))

    if debug:
        body.save("body_ori.jpg") # The full-image
        face.save("face_new.jpg") # Inference face
        face_large.save("face_large_ori.jpg") # Original face
        mask_image.save("mask_image.jpg") # Face area
        modified_mask_image.save("modified_mask_image.jpg") # Face area with crop


    kernal_size_factor_x = 1
    kernal_size_factor_y = 2
    dilate_size_factor_x = 1
    dilate_size_factor_y = 1
    blur_kernel_size_x = int(0.1 * ori_shape[0] // 2 * (kernal_size_factor_x *2)) + 1 
    blur_kernel_size_y = int(0.1 * ori_shape[0] // 2 * (kernal_size_factor_y *2)) + 1 
    dilate_kernel_size_x = int(0.1 * ori_shape[0] // 2 * (dilate_size_factor_x *2)) + 1 
    dilate_kernel_size_y = int(0.1 * ori_shape[0] // 2 * (dilate_size_factor_y *2)) + 1 
    # print(blur_kernel_size) # 69
    # mask_array = cv2.GaussianBlur(np.array(modified_mask_image), (blur_kernel_size_x, blur_kernel_size_y), 0)

    mask_array = cv2.GaussianBlur(np.array(modified_mask_image), (blur_kernel_size_x, blur_kernel_size_y), 0)

    mask_image = Image.fromarray(mask_array) 

    face_large.paste(face, (x-x_s, y-y_s, x1-x_s, y1-y_s))   
    body.paste(face_large, crop_box[:2], mask_image)
    if debug:
        body.save("body.jpg")
        face_large.save("face_large.jpg")
        mask_image.save("mask_image_blur.jpg") # Mask with blur

    body = np.array(body)
    return body[:,:,::-1]

def get_image_prepare_material(image,face_box,upper_boundary_ratio = 0.5,expand=1.2):
    body = Image.fromarray(image[:,:,::-1])

    x, y, x1, y1 = face_box
    #print(x1-x,y1-y)
    crop_box, s = get_crop_box(face_box, expand)
    x_s, y_s, x_e, y_e = crop_box

    face_large = body.crop(crop_box)
    ori_shape = face_large.size

    mask_image = face_seg(face_large)
    mask_small = mask_image.crop((x-x_s, y-y_s, x1-x_s, y1-y_s))
    mask_image = Image.new('L', ori_shape, 0)
    mask_image.paste(mask_small, (x-x_s, y-y_s, x1-x_s, y1-y_s))

    # keep upper_boundary_ratio of talking area
    width, height = mask_image.size
    top_boundary = int(height * upper_boundary_ratio)
    modified_mask_image = Image.new('L', ori_shape, 0)
    modified_mask_image.paste(mask_image.crop((0, top_boundary, width, height)), (0, top_boundary))

    blur_kernel_size = int(0.1 * ori_shape[0] // 2 * 2) + 1
    mask_array = cv2.GaussianBlur(np.array(modified_mask_image), (blur_kernel_size, blur_kernel_size), 0)
    return mask_array,crop_box

def get_image_blending(image,face,face_box,mask_array,crop_box):
    body = Image.fromarray(image[:,:,::-1])
    face = Image.fromarray(face[:,:,::-1])

    x, y, x1, y1 = face_box
    x_s, y_s, x_e, y_e = crop_box
    face_large = body.crop(crop_box)

    mask_image = Image.fromarray(mask_array)
    mask_image = mask_image.convert("L")
    face_large.paste(face, (x-x_s, y-y_s, x1-x_s, y1-y_s))
    body.paste(face_large, crop_box[:2], mask_image)
    body = np.array(body)
    return body[:,:,::-1]